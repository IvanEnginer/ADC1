
ADC1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000d6  0000014a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  0000014c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  00000818  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  000008af  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  000008de  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000197  00000000  00000000  00000916  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000013b  00000000  00000000  00000aad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000001ab  00000000  00000000  00000be8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000007c  00000000  00000000  00000d94  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000010e  00000000  00000000  00000e10  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000c3  00000000  00000000  00000f1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00000fe1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 36 00 	jmp	0x6c	; 0x6c <__vector_16>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 62 00 	call	0xc4	; 0xc4 <main>
  64:	0c 94 69 00 	jmp	0xd2	; 0xd2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <__vector_16>:
#include <avr/io.h>
#include <avr/delay.h>
#include <avr/interrupt.h>

ISR(ADC_vect)
{
  6c:	1f 92       	push	r1
  6e:	0f 92       	push	r0
  70:	0f b6       	in	r0, 0x3f	; 63
  72:	0f 92       	push	r0
  74:	11 24       	eor	r1, r1
  76:	2f 93       	push	r18
  78:	3f 93       	push	r19
  7a:	4f 93       	push	r20
  7c:	5f 93       	push	r21
  7e:	8f 93       	push	r24
  80:	9f 93       	push	r25
	int a=(ADCW+1)/128;
  82:	84 b1       	in	r24, 0x04	; 4
  84:	95 b1       	in	r25, 0x05	; 5
  86:	01 96       	adiw	r24, 0x01	; 1
  88:	88 0f       	add	r24, r24
  8a:	89 2f       	mov	r24, r25
  8c:	88 1f       	adc	r24, r24
  8e:	99 0b       	sbc	r25, r25
  90:	91 95       	neg	r25
	if (a ==  0)
  92:	00 97       	sbiw	r24, 0x00	; 0
  94:	11 f4       	brne	.+4      	; 0x9a <__vector_16+0x2e>
	PORTB = 0x00;
  96:	18 ba       	out	0x18, r1	; 24
  98:	0a c0       	rjmp	.+20     	; 0xae <__vector_16+0x42>
	else
	PORTB = 1 << (a-1);
  9a:	01 97       	sbiw	r24, 0x01	; 1
  9c:	21 e0       	ldi	r18, 0x01	; 1
  9e:	30 e0       	ldi	r19, 0x00	; 0
  a0:	a9 01       	movw	r20, r18
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <__vector_16+0x3c>
  a4:	44 0f       	add	r20, r20
  a6:	55 1f       	adc	r21, r21
  a8:	8a 95       	dec	r24
  aa:	e2 f7       	brpl	.-8      	; 0xa4 <__vector_16+0x38>
  ac:	48 bb       	out	0x18, r20	; 24
}
  ae:	9f 91       	pop	r25
  b0:	8f 91       	pop	r24
  b2:	5f 91       	pop	r21
  b4:	4f 91       	pop	r20
  b6:	3f 91       	pop	r19
  b8:	2f 91       	pop	r18
  ba:	0f 90       	pop	r0
  bc:	0f be       	out	0x3f, r0	; 63
  be:	0f 90       	pop	r0
  c0:	1f 90       	pop	r1
  c2:	18 95       	reti

000000c4 <main>:
	ADCSRA|=0x10;
	return ADCW;
}
int main(void)
{
	DDRB = 0xFF;
  c4:	8f ef       	ldi	r24, 0xFF	; 255
  c6:	87 bb       	out	0x17, r24	; 23
	ADMUX = 0x00;
  c8:	17 b8       	out	0x07, r1	; 7
	ADCSRA = 0x8D;
  ca:	8d e8       	ldi	r24, 0x8D	; 141
  cc:	86 b9       	out	0x06, r24	; 6
	sei();
  ce:	78 94       	sei
  d0:	ff cf       	rjmp	.-2      	; 0xd0 <main+0xc>

000000d2 <_exit>:
  d2:	f8 94       	cli

000000d4 <__stop_program>:
  d4:	ff cf       	rjmp	.-2      	; 0xd4 <__stop_program>
